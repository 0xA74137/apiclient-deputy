using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Av.ApiClients.Deputy.Models;

namespace Av.ApiClients.Deputy.ResourceGenerator.Generators
{
    internal class ResourceGenerator(string resourceName, ResourceInfo resourceInfo, bool assocsEnabled = false)
    {
        public string Generate()
        {
            var sb = new IndentableStringBuilder(new string(' ', 4));
            AddPreamble(sb);
            sb.AppendLine();
            AddImplementation(sb);
            sb.AppendLine();

            return sb.ToString();
        }

        private void AddPreamble(IndentableStringBuilder sb)
        {
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("#nullable enable");
            sb.AppendLine("using System.Text.Json.Serialization;");
            sb.AppendLine("using Av.ApiClients.Deputy.Converters;");
            sb.AppendLine("using Av.ApiClients.Deputy.Models.Resources;");
            sb.AppendLine();
            sb.AppendLine("namespace Av.ApiClients.Deputy.Models.Resources;");
        }

        private void AddImplementation(IndentableStringBuilder sb)
        {
            sb.AppendLine($"[JsonConverterType(typeof(ResourceConverter<{resourceName}>))]");
            sb.AppendLine($"public class {resourceName} : IResource");
            sb.AppendLine($"{{");
            sb.Indent();

            AddProperties(sb, ImplOrInterface.Implementation);

            sb.Dedent();
            sb.AppendLine($"}}");
        }

        private void AddProperties(IndentableStringBuilder sb, ImplOrInterface implOrInterface)
        {
            foreach (var (name, type) in resourceInfo.Fields)
                AddProperty(sb, name, type);

            if (resourceInfo.Joins.Count > 0)
                sb.AppendLine();

            foreach (var (joinName, resource) in resourceInfo.Joins)
            {
                sb.AppendLine();
                AddJoin(sb, joinName, resource);
            }

            if (!assocsEnabled)
                return;

            if (resourceInfo.Associations.Count > 0)
                sb.AppendLine();

            foreach (var (assocName, resource) in resourceInfo.Associations)
            {
                sb.AppendLine();
                AddAssoc(sb, assocName, resource);
            }
        }

        private void AddProperty(IndentableStringBuilder sb, string name, FieldType type)
        {
            sb.AppendLine($@"[JsonPropertyName(""{name}"")]");
            sb.AppendLine($@"public {MapType(type)} {XName(name)} {{ get; set; }}");
        }

        private void AddJoin(IndentableStringBuilder sb, string joinName, string resource)
        {
            sb.AppendLine($"[JsonConverter(typeof(JoinConverter<{resource}>))]");
            sb.AppendLine($@"public Join<{resource}>? {XName(joinName)} {{ get; set; }}");
        }

        private void AddAssoc(IndentableStringBuilder sb, string assocName, string resource)
        {
            sb.AppendLine($"[JsonConverter(typeof(AssocConverter<{resource}>))]");
            sb.AppendLine($@"public Assoc<{resource}>? {XName(assocName)} {{ get; set; }}");
        }

        private string MapType(FieldType type) => type switch
        {
            FieldType.Integer => "long?",
            FieldType.Date => "DateTimeOffset?",
            FieldType.DateTime => "DateTimeOffset?",
            FieldType.Time => "DateTimeOffset?",
            FieldType.VarChar => "string?",
            FieldType.Bit => "bool?",
            FieldType.Float => "double?",
            FieldType.Blob => "string?",
            FieldType.Json => "string?",
            _ => "object?",
        };

        private string XName(string name)
        {
            string output = name;

            if (name == resourceName)
                output = $"{name}Value";

            return output;
        }
    }
}
