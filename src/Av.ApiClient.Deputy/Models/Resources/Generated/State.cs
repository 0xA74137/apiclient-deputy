// <auto-generated/>
#nullable enable
using System.Text.Json.Serialization;
using Av.ApiClients.Deputy.Converters;
using Av.ApiClients.Deputy.Models.Resources;

namespace Av.ApiClients.Deputy.Models.Resources;

using System.Text.Json;
[JsonConverter(typeof(ResourceConverter<State>))]
public class State : IResource, IHasPropertyTracker<StatePropertyTracker>
{
    private long? _Id;
    private long? _Country;
    private string? _Code;
    private bool? _Active;
    private long? _SortOrder;
    private string? _State;
    private long? _Creator;
    private DateTimeOffset? _Created;
    private DateTimeOffset? _Modified;
    private StatePropertyTracker _tracker = new();

    [JsonPropertyName("Id")]
    public long? Id { get => _Id; set { _Id = value; _tracker.Id = true; }}
    [JsonPropertyName("Country")]
    public long? Country { get => _Country; set { _Country = value; _tracker.Country = true; }}
    [JsonPropertyName("Code")]
    public string? Code { get => _Code; set { _Code = value; _tracker.Code = true; }}
    [JsonPropertyName("Active")]
    public bool? Active { get => _Active; set { _Active = value; _tracker.Active = true; }}
    [JsonPropertyName("SortOrder")]
    public long? SortOrder { get => _SortOrder; set { _SortOrder = value; _tracker.SortOrder = true; }}
    [JsonPropertyName("State")]
    public string? StateValue { get => _State; set { _State = value; _tracker.StateValue = true; }}
    [JsonPropertyName("Creator")]
    public long? Creator { get => _Creator; set { _Creator = value; _tracker.Creator = true; }}
    [JsonPropertyName("Created")]
    public DateTimeOffset? Created { get => _Created; set { _Created = value; _tracker.Created = true; }}
    [JsonPropertyName("Modified")]
    public DateTimeOffset? Modified { get => _Modified; set { _Modified = value; _tracker.Modified = true; }}
    [JsonConverter(typeof(JoinConverter<Country>))]
    public Join<Country>? CountryObject { get; set; }
    StatePropertyTracker IHasPropertyTracker<StatePropertyTracker>.Tracker => _tracker;

    void IHasPropertyTracker<StatePropertyTracker>.ClearTrackedProperties() => ((IHasPropertyTracker<StatePropertyTracker>)this).Tracker.Clear();

}

internal class StatePropertyTracker
{
    internal bool Id;
    internal bool Country;
    internal bool Code;
    internal bool Active;
    internal bool SortOrder;
    internal bool StateValue;
    internal bool Creator;
    internal bool Created;
    internal bool Modified;

    internal void Clear()
    {
        Id = false;
        Country = false;
        Code = false;
        Active = false;
        SortOrder = false;
        StateValue = false;
        Creator = false;
        Created = false;
        Modified = false;
    }

}

internal class StateSerializer : JsonConverter<State>
{
    public override State? Read(ref Utf8JsonReader reader,Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
    public override void Write(Utf8JsonWriter writer,State value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();
        var tracker = ((IHasPropertyTracker<StatePropertyTracker>)value).Tracker;
        if (tracker.Id)
        {
            writer.WritePropertyName("Id");
            JsonSerializer.Serialize(writer,value.Id,options);
        }
        if (tracker.Country)
        {
            writer.WritePropertyName("Country");
            JsonSerializer.Serialize(writer,value.Country,options);
        }
        if (tracker.Code)
        {
            writer.WritePropertyName("Code");
            JsonSerializer.Serialize(writer,value.Code,options);
        }
        if (tracker.Active)
        {
            writer.WritePropertyName("Active");
            JsonSerializer.Serialize(writer,value.Active,options);
        }
        if (tracker.SortOrder)
        {
            writer.WritePropertyName("SortOrder");
            JsonSerializer.Serialize(writer,value.SortOrder,options);
        }
        if (tracker.State)
        {
            writer.WritePropertyName("State");
            JsonSerializer.Serialize(writer,value.StateValue,options);
        }
        if (tracker.Creator)
        {
            writer.WritePropertyName("Creator");
            JsonSerializer.Serialize(writer,value.Creator,options);
        }
        if (tracker.Created)
        {
            writer.WritePropertyName("Created");
            JsonSerializer.Serialize(writer,value.Created,options);
        }
        if (tracker.Modified)
        {
            writer.WritePropertyName("Modified");
            JsonSerializer.Serialize(writer,value.Modified,options);
        }
        writer.WriteEndObject();
    }

}

