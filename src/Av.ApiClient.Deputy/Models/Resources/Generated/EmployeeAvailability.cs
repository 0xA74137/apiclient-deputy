// <auto-generated/>
#nullable enable
using System.Text.Json.Serialization;
using Av.ApiClients.Deputy.Converters;
using Av.ApiClients.Deputy.Models.Resources;

namespace Av.ApiClients.Deputy.Models.Resources;

using System.Text.Json;
[JsonConverter(typeof(ResourceConverter<EmployeeAvailability>))]
public class EmployeeAvailability : IResource, IHasPropertyTracker<EmployeeAvailabilityPropertyTracker>
{
    private long? _Id;
    private long? _Employee;
    private long? _Type;
    private DateTimeOffset? _MaxDateRecurringGenerated;
    private long? _StartTime;
    private long? _EndTime;
    private DateTimeOffset? _Date;
    private string? _Comment;
    private long? _Schedule;
    private long? _Creator;
    private DateTimeOffset? _Created;
    private DateTimeOffset? _Modified;
    private EmployeeAvailabilityPropertyTracker _tracker = new();

    [JsonPropertyName("Id")]
    public long? Id { get => _Id; set { _Id = value; _tracker.Id = true; }}
    [JsonPropertyName("Employee")]
    public long? Employee { get => _Employee; set { _Employee = value; _tracker.Employee = true; }}
    [JsonPropertyName("Type")]
    public long? Type { get => _Type; set { _Type = value; _tracker.Type = true; }}
    [JsonPropertyName("MaxDateRecurringGenerated")]
    public DateTimeOffset? MaxDateRecurringGenerated { get => _MaxDateRecurringGenerated; set { _MaxDateRecurringGenerated = value; _tracker.MaxDateRecurringGenerated = true; }}
    [JsonPropertyName("StartTime")]
    public long? StartTime { get => _StartTime; set { _StartTime = value; _tracker.StartTime = true; }}
    [JsonPropertyName("EndTime")]
    public long? EndTime { get => _EndTime; set { _EndTime = value; _tracker.EndTime = true; }}
    [JsonPropertyName("Date")]
    public DateTimeOffset? Date { get => _Date; set { _Date = value; _tracker.Date = true; }}
    [JsonPropertyName("Comment")]
    public string? Comment { get => _Comment; set { _Comment = value; _tracker.Comment = true; }}
    [JsonPropertyName("Schedule")]
    public long? Schedule { get => _Schedule; set { _Schedule = value; _tracker.Schedule = true; }}
    [JsonPropertyName("Creator")]
    public long? Creator { get => _Creator; set { _Creator = value; _tracker.Creator = true; }}
    [JsonPropertyName("Created")]
    public DateTimeOffset? Created { get => _Created; set { _Created = value; _tracker.Created = true; }}
    [JsonPropertyName("Modified")]
    public DateTimeOffset? Modified { get => _Modified; set { _Modified = value; _tracker.Modified = true; }}
    [JsonConverter(typeof(JoinConverter<Employee>))]
    public Join<Employee>? EmployeeObject { get; set; }
    [JsonConverter(typeof(JoinConverter<Schedule>))]
    public Join<Schedule>? ScheduleObject { get; set; }
    EmployeeAvailabilityPropertyTracker IHasPropertyTracker<EmployeeAvailabilityPropertyTracker>.Tracker => _tracker;

    void IHasPropertyTracker<EmployeeAvailabilityPropertyTracker>.ClearTrackedProperties() => ((IHasPropertyTracker<EmployeeAvailabilityPropertyTracker>)this).Tracker.Clear();

}

internal class EmployeeAvailabilityPropertyTracker
{
    internal bool Id;
    internal bool Employee;
    internal bool Type;
    internal bool MaxDateRecurringGenerated;
    internal bool StartTime;
    internal bool EndTime;
    internal bool Date;
    internal bool Comment;
    internal bool Schedule;
    internal bool Creator;
    internal bool Created;
    internal bool Modified;

    internal void Clear()
    {
        Id = false;
        Employee = false;
        Type = false;
        MaxDateRecurringGenerated = false;
        StartTime = false;
        EndTime = false;
        Date = false;
        Comment = false;
        Schedule = false;
        Creator = false;
        Created = false;
        Modified = false;
    }

}

internal class EmployeeAvailabilitySerializer : JsonConverter<EmployeeAvailability>
{
    public override EmployeeAvailability? Read(ref Utf8JsonReader reader,Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
    public override void Write(Utf8JsonWriter writer,EmployeeAvailability value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();
        var tracker = ((IHasPropertyTracker<EmployeeAvailabilityPropertyTracker>)value).Tracker;
        if (tracker.Id)
        {
            writer.WritePropertyName("Id");
            JsonSerializer.Serialize(writer,value.Id,options);
        }
        if (tracker.Employee)
        {
            writer.WritePropertyName("Employee");
            JsonSerializer.Serialize(writer,value.Employee,options);
        }
        if (tracker.Type)
        {
            writer.WritePropertyName("Type");
            JsonSerializer.Serialize(writer,value.Type,options);
        }
        if (tracker.MaxDateRecurringGenerated)
        {
            writer.WritePropertyName("MaxDateRecurringGenerated");
            JsonSerializer.Serialize(writer,value.MaxDateRecurringGenerated,options);
        }
        if (tracker.StartTime)
        {
            writer.WritePropertyName("StartTime");
            JsonSerializer.Serialize(writer,value.StartTime,options);
        }
        if (tracker.EndTime)
        {
            writer.WritePropertyName("EndTime");
            JsonSerializer.Serialize(writer,value.EndTime,options);
        }
        if (tracker.Date)
        {
            writer.WritePropertyName("Date");
            JsonSerializer.Serialize(writer,value.Date,options);
        }
        if (tracker.Comment)
        {
            writer.WritePropertyName("Comment");
            JsonSerializer.Serialize(writer,value.Comment,options);
        }
        if (tracker.Schedule)
        {
            writer.WritePropertyName("Schedule");
            JsonSerializer.Serialize(writer,value.Schedule,options);
        }
        if (tracker.Creator)
        {
            writer.WritePropertyName("Creator");
            JsonSerializer.Serialize(writer,value.Creator,options);
        }
        if (tracker.Created)
        {
            writer.WritePropertyName("Created");
            JsonSerializer.Serialize(writer,value.Created,options);
        }
        if (tracker.Modified)
        {
            writer.WritePropertyName("Modified");
            JsonSerializer.Serialize(writer,value.Modified,options);
        }
        writer.WriteEndObject();
    }

}

